/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    academicLevels: AcademicLevel;
    subjects: Subject;
    'exam-papers': ExamPaper;
    mcq: Mcq;
    videos: Video;
    books: Book;
    subscriptions: Subscription;
    media: Media;
    'study-plans': StudyPlan;
    categories: Category;
    transactions: Transaction;
    topics: Topic;
    'user-progress': UserProgress;
    'test-results': TestResult;
    'content-access': ContentAccess;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    academicLevels: AcademicLevelsSelect<false> | AcademicLevelsSelect<true>;
    subjects: SubjectsSelect<false> | SubjectsSelect<true>;
    'exam-papers': ExamPapersSelect<false> | ExamPapersSelect<true>;
    mcq: McqSelect<false> | McqSelect<true>;
    videos: VideosSelect<false> | VideosSelect<true>;
    books: BooksSelect<false> | BooksSelect<true>;
    subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'study-plans': StudyPlansSelect<false> | StudyPlansSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    transactions: TransactionsSelect<false> | TransactionsSelect<true>;
    topics: TopicsSelect<false> | TopicsSelect<true>;
    'user-progress': UserProgressSelect<false> | UserProgressSelect<true>;
    'test-results': TestResultsSelect<false> | TestResultsSelect<true>;
    'content-access': ContentAccessSelect<false> | ContentAccessSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Setting;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  firstName: string;
  lastName: string;
  phoneNumber?: string | null;
  dateOfBirth?: string | null;
  academicLevel?: (string | null) | AcademicLevel;
  isActive?: boolean | null;
  referralCode?: string | null;
  referredBy?: (string | null) | User;
  totalReferrals?: number | null;
  lastActiveAt?: string | null;
  role: 'super-admin' | 'admin' | 'content-manager' | 'support' | 'user';
  profilePic?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "academicLevels".
 */
export interface AcademicLevel {
  id: string;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjects".
 */
export interface Subject {
  id: string;
  name: string;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam-papers".
 */
export interface ExamPaper {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  academicLevel: string | AcademicLevel;
  subject: string | Subject;
  year: number;
  paperType: '1' | '2' | '3';
  pdf: string | Media;
  categories?: (string | Category)[] | null;
  /**
   * Description of the exam paper
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Exam duration in minutes
   */
  duration?: number | null;
  /**
   * Total marks for the exam
   */
  totalMarks?: number | null;
  /**
   * Whether subscription is required to access this exam paper
   */
  subscriptionRequired?: boolean | null;
  /**
   * Which subscription tiers can access this exam paper
   */
  subscriptionTiers?: ('free' | 'monthly' | 'annual')[] | null;
  /**
   * Whether PDF has DRM protection
   */
  isProtected?: boolean | null;
  /**
   * Whether exam paper can be printed
   */
  allowPrint?: boolean | null;
  /**
   * Encryption key for content protection
   */
  encryptionKey?: string | null;
  /**
   * Whether answer key is available
   */
  hasAnswerKey?: boolean | null;
  /**
   * Answer key PDF file
   */
  answerKeyPdf?: (string | null) | Media;
  /**
   * Whether exam paper is active and accessible
   */
  isActive?: boolean | null;
  /**
   * Total number of views
   */
  viewCount?: number | null;
  /**
   * Last time exam paper was accessed
   */
  lastAccessed?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mcq".
 */
export interface Mcq {
  id: string;
  question: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  options: {
    text: string;
    isCorrect?: boolean | null;
    id?: string | null;
  }[];
  explanation?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  academicLevel: string | AcademicLevel;
  subject: string | Subject;
  difficulty?: ('easy' | 'medium' | 'hard') | null;
  topic?: (string | Topic)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics".
 */
export interface Topic {
  id: string;
  name: string;
  subjects: (string | Subject)[];
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos".
 */
export interface Video {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  subject: string | Subject;
  topic?: (string | Topic)[] | null;
  video: string | Media;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books".
 */
export interface Book {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  academicLevel: string | AcademicLevel;
  subject: string | Subject;
  category?: (string | null) | Category;
  pdf: string | Media;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Book author(s)
   */
  author?: string | null;
  /**
   * ISBN number
   */
  isbn?: string | null;
  /**
   * Total number of pages
   */
  pageCount?: number | null;
  /**
   * Whether subscription is required to access this book
   */
  subscriptionRequired?: boolean | null;
  /**
   * Which subscription tiers can access this book
   */
  subscriptionTiers?: ('free' | 'monthly' | 'annual')[] | null;
  /**
   * Whether PDF has DRM protection
   */
  isProtected?: boolean | null;
  /**
   * Whether book can be printed
   */
  allowPrint?: boolean | null;
  /**
   * Whether text can be copied from the book
   */
  allowCopy?: boolean | null;
  /**
   * Watermark text to overlay on PDF pages
   */
  watermarkText?: string | null;
  /**
   * Encryption key for content protection
   */
  encryptionKey?: string | null;
  /**
   * File size in bytes
   */
  fileSize?: number | null;
  /**
   * Whether book is active and accessible
   */
  isActive?: boolean | null;
  /**
   * Total number of views
   */
  viewCount?: number | null;
  /**
   * Last time book was accessed
   */
  lastAccessed?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
  id: string;
  user: string | User;
  plan: 'free' | 'monthly' | 'annual';
  startDate: string;
  endDate: string;
  paymentStatus?: ('pending' | 'paid' | 'failed' | 'expired') | null;
  transactions?: (string | Transaction)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
  id: string;
  user: string | User;
  subscription?: (string | null) | Subscription;
  transactionId: string;
  /**
   * Transaction ID from Fapshi (e.g., fp_1234567890)
   */
  fapshiTransId?: string | null;
  /**
   * Your system order/transaction ID for reconciliation
   */
  externalId?: string | null;
  amount: number;
  /**
   * Amount received after Fapshi fees deduction
   */
  revenue?: number | null;
  status?: ('created' | 'pending' | 'successful' | 'failed' | 'expired' | 'refunded') | null;
  /**
   * Payment method used
   */
  paymentMedium?: ('mobile money' | 'orange money') | null;
  /**
   * Phone number used for payment
   */
  phone?: string | null;
  /**
   * Transaction ID from the mobile money operator
   */
  financialTransId?: string | null;
  dateInitiated: string;
  /**
   * Date when payment was confirmed
   */
  dateConfirmed?: string | null;
  /**
   * Whether webhook notification was received
   */
  webhookReceived?: boolean | null;
  /**
   * Timestamp when webhook was received
   */
  webhookReceivedAt?: string | null;
  /**
   * Last time status was checked via API
   */
  lastStatusCheck?: string | null;
  /**
   * Number of times status was checked
   */
  statusCheckCount?: number | null;
  /**
   * Whether transaction has been reconciled
   */
  reconciled?: boolean | null;
  /**
   * Date when transaction was reconciled
   */
  reconciledAt?: string | null;
  /**
   * Additional notes or error messages
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "study-plans".
 */
export interface StudyPlan {
  id: string;
  user: string | User;
  goals?: string | null;
  subjects?: (string | Subject)[] | null;
  timetable?:
    | {
        day?: string | null;
        session?: string | null;
        subject?: (string | null) | Subject;
        id?: string | null;
      }[]
    | null;
  /**
   * Overall progress percentage (0-100)
   */
  progress?: number | null;
  /**
   * Academic level for this study plan
   */
  academicLevel: string | AcademicLevel;
  /**
   * Type of study plan
   */
  planType?: ('exam_prep' | 'regular_study' | 'revision' | 'catch_up' | 'advanced') | null;
  /**
   * Target exam date for exam preparation plans
   */
  targetExamDate?: string | null;
  studyGoals?:
    | {
        title: string;
        description?: string | null;
        subject?: (string | null) | Subject;
        targetDate?: string | null;
        priority?: ('high' | 'medium' | 'low') | null;
        status?: ('not_started' | 'in_progress' | 'completed' | 'paused') | null;
        /**
         * Goal progress percentage (0-100)
         */
        progress?: number | null;
        completedAt?: string | null;
        id?: string | null;
      }[]
    | null;
  weeklySchedule?:
    | {
        dayOfWeek: 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';
        /**
         * Start time (e.g., 09:00)
         */
        startTime: string;
        /**
         * End time (e.g., 10:30)
         */
        endTime: string;
        subject: string | Subject;
        topics?: (string | Topic)[] | null;
        sessionType?: ('study' | 'practice' | 'revision' | 'test') | null;
        isActive?: boolean | null;
        id?: string | null;
      }[]
    | null;
  milestones?:
    | {
        title: string;
        description?: string | null;
        targetDate: string;
        subjects?: (string | Subject)[] | null;
        isCompleted?: boolean | null;
        completedAt?: string | null;
        /**
         * Reward for completing this milestone
         */
        reward?: string | null;
        id?: string | null;
      }[]
    | null;
  studyReminders?:
    | {
        title: string;
        message?: string | null;
        reminderTime: string;
        reminderType?: ('study_session' | 'assignment_due' | 'exam_reminder' | 'goal_deadline' | 'custom') | null;
        isRecurring?: boolean | null;
        recurrencePattern?: ('daily' | 'weekly' | 'monthly') | null;
        isActive?: boolean | null;
        isSent?: boolean | null;
        sentAt?: string | null;
        id?: string | null;
      }[]
    | null;
  studyPreferences?: {
    preferredStudyTime?: ('early_morning' | 'morning' | 'afternoon' | 'evening' | 'night' | 'late_night') | null;
    /**
     * Preferred study session duration in minutes
     */
    sessionDuration?: number | null;
    /**
     * Preferred break duration in minutes
     */
    breakDuration?: number | null;
    studyMethod?: ('reading' | 'video' | 'practice' | 'notes' | 'group' | 'flashcards')[] | null;
    difficultyPreference?: ('easy_first' | 'hard_first' | 'mixed') | null;
  };
  /**
   * Study plan analytics and statistics
   */
  analytics?: {
    /**
     * Total hours studied
     */
    totalStudyHours?: number | null;
    /**
     * Hours studied this week
     */
    weeklyStudyHours?: number | null;
    /**
     * Current study streak in days
     */
    currentStreak?: number | null;
    /**
     * Longest study streak in days
     */
    longestStreak?: number | null;
    /**
     * Number of completed goals
     */
    completedGoals?: number | null;
    /**
     * Number of completed milestones
     */
    completedMilestones?: number | null;
    /**
     * Average study session duration in minutes
     */
    averageSessionDuration?: number | null;
    /**
     * Last study session date
     */
    lastStudySession?: string | null;
  };
  /**
   * Whether study plan is active
   */
  isActive?: boolean | null;
  createdAt: string;
  updatedAt: string;
  /**
   * Additional notes about the study plan
   */
  notes?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-progress".
 */
export interface UserProgress {
  id: string;
  user: string | User;
  contentType: 'mcq' | 'video' | 'book' | 'exam-paper' | 'study-plan';
  /**
   * ID of the content item (video, book, mcq, etc.)
   */
  contentId: string;
  subject?: (string | null) | Subject;
  topic?: (string | Topic)[] | null;
  academicLevel?: (string | null) | AcademicLevel;
  /**
   * Progress percentage (0-100)
   */
  progressPercentage?: number | null;
  /**
   * Time spent in minutes
   */
  timeSpent?: number | null;
  lastAccessed?: string | null;
  completed?: boolean | null;
  completedAt?: string | null;
  /**
   * Score for tests/assessments (percentage)
   */
  score?: number | null;
  /**
   * Number of attempts for this content
   */
  attempts?: number | null;
  bookmarks?:
    | {
        /**
         * Page number, timestamp, or position marker
         */
        position?: string | null;
        note?: string | null;
        createdAt?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Current study streak in days
   */
  studyStreak?: number | null;
  achievements?:
    | {
        achievementType?:
          | ('first_test' | 'perfect_score' | 'study_streak' | 'content_master' | 'early_bird' | 'night_owl')
          | null;
        earnedAt?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test-results".
 */
export interface TestResult {
  id: string;
  user: string | User;
  testType: 'practice' | 'timed' | 'exam_paper' | 'topic' | 'subject';
  subject: string | Subject;
  topics?: (string | Topic)[] | null;
  academicLevel: string | AcademicLevel;
  /**
   * Reference to exam paper if this is an exam paper test
   */
  examPaper?: (string | null) | ExamPaper;
  questions: {
    question: string | Mcq;
    /**
     * The option text that user selected
     */
    selectedAnswer: string;
    /**
     * The correct option text
     */
    correctAnswer: string;
    isCorrect: boolean;
    /**
     * Time spent on this question in seconds
     */
    timeSpent?: number | null;
    difficulty?: ('easy' | 'medium' | 'hard') | null;
    id?: string | null;
  }[];
  totalQuestions: number;
  correctAnswers: number;
  incorrectAnswers: number;
  skippedQuestions?: number | null;
  scorePercentage: number;
  grade?: ('A+' | 'A' | 'B+' | 'B' | 'C+' | 'C' | 'D' | 'F') | null;
  /**
   * Time limit in minutes (null for untimed tests)
   */
  timeLimit?: number | null;
  /**
   * Actual time used in minutes
   */
  timeUsed: number;
  startedAt: string;
  completedAt: string;
  isCompleted?: boolean | null;
  /**
   * Which attempt this is for the same test/content
   */
  attemptNumber?: number | null;
  weakAreas?:
    | {
        topic?: (string | null) | Topic;
        /**
         * Accuracy percentage for this topic
         */
        accuracy?: number | null;
        id?: string | null;
      }[]
    | null;
  strongAreas?:
    | {
        topic?: (string | null) | Topic;
        /**
         * Accuracy percentage for this topic
         */
        accuracy?: number | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Whether user has reviewed incorrect answers
   */
  reviewMode?: boolean | null;
  reviewedAt?: string | null;
  /**
   * User notes about this test attempt
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manages subscription-based access control for content
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content-access".
 */
export interface ContentAccess {
  id: string;
  /**
   * User requesting access
   */
  user: string | User;
  /**
   * Type of content being accessed
   */
  contentType: 'videos' | 'books' | 'exam-papers' | 'mcquestions';
  /**
   * ID of the specific content item
   */
  contentId: string;
  /**
   * Title of the content for reference
   */
  contentTitle?: string | null;
  /**
   * User subscription used for access
   */
  subscription: string | Subscription;
  /**
   * Whether access is granted
   */
  accessGranted?: boolean | null;
  /**
   * Reason for access grant/denial
   */
  accessReason?:
    | ('valid_subscription' | 'free_content' | 'trial_access' | 'admin_override' | 'promotional_access')
    | null;
  /**
   * Reason for access denial
   */
  accessDeniedReason?:
    | (
        | 'no_subscription'
        | 'subscription_expired'
        | 'insufficient_tier'
        | 'content_unavailable'
        | 'geo_restricted'
        | 'account_suspended'
      )
    | null;
  /**
   * Minimum subscription tier required
   */
  requiredSubscriptionTier?: ('free' | 'monthly' | 'annual') | null;
  /**
   * User current subscription tier
   */
  userSubscriptionTier?: ('free' | 'monthly' | 'annual') | null;
  /**
   * Number of access attempts
   */
  accessAttempts?: number | null;
  /**
   * First time access was attempted
   */
  firstAccessAt?: string | null;
  /**
   * Last time access was attempted
   */
  lastAccessAt?: string | null;
  /**
   * When access was granted
   */
  grantedAt?: string | null;
  /**
   * When access expires
   */
  expiresAt?: string | null;
  deviceInfo?: {
    /**
     * Device identifier
     */
    deviceId?: string | null;
    deviceType?: ('mobile' | 'tablet' | 'desktop' | 'unknown') | null;
    /**
     * Operating system/platform
     */
    platform?: string | null;
    /**
     * Browser user agent
     */
    userAgent?: string | null;
    /**
     * IP address of access attempt
     */
    ipAddress?: string | null;
  };
  /**
   * Whether content can be printed
   */
  printAllowed?: boolean | null;
  /**
   * Whether content can be copied
   */
  copyAllowed?: boolean | null;
  /**
   * Maximum concurrent sessions allowed
   */
  maxConcurrentSessions?: number | null;
  /**
   * Current active sessions
   */
  currentSessions?: number | null;
  /**
   * Unique session token for access tracking
   */
  sessionToken?: string | null;
  /**
   * Whether access record is active
   */
  isActive?: boolean | null;
  /**
   * Additional notes about access
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'academicLevels';
        value: string | AcademicLevel;
      } | null)
    | ({
        relationTo: 'subjects';
        value: string | Subject;
      } | null)
    | ({
        relationTo: 'exam-papers';
        value: string | ExamPaper;
      } | null)
    | ({
        relationTo: 'mcq';
        value: string | Mcq;
      } | null)
    | ({
        relationTo: 'videos';
        value: string | Video;
      } | null)
    | ({
        relationTo: 'books';
        value: string | Book;
      } | null)
    | ({
        relationTo: 'subscriptions';
        value: string | Subscription;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'study-plans';
        value: string | StudyPlan;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'transactions';
        value: string | Transaction;
      } | null)
    | ({
        relationTo: 'topics';
        value: string | Topic;
      } | null)
    | ({
        relationTo: 'user-progress';
        value: string | UserProgress;
      } | null)
    | ({
        relationTo: 'test-results';
        value: string | TestResult;
      } | null)
    | ({
        relationTo: 'content-access';
        value: string | ContentAccess;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  phoneNumber?: T;
  dateOfBirth?: T;
  academicLevel?: T;
  isActive?: T;
  referralCode?: T;
  referredBy?: T;
  totalReferrals?: T;
  lastActiveAt?: T;
  role?: T;
  profilePic?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "academicLevels_select".
 */
export interface AcademicLevelsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subjects_select".
 */
export interface SubjectsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "exam-papers_select".
 */
export interface ExamPapersSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  academicLevel?: T;
  subject?: T;
  year?: T;
  paperType?: T;
  pdf?: T;
  categories?: T;
  description?: T;
  duration?: T;
  totalMarks?: T;
  subscriptionRequired?: T;
  subscriptionTiers?: T;
  isProtected?: T;
  allowPrint?: T;
  encryptionKey?: T;
  hasAnswerKey?: T;
  answerKeyPdf?: T;
  isActive?: T;
  viewCount?: T;
  lastAccessed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mcq_select".
 */
export interface McqSelect<T extends boolean = true> {
  question?: T;
  options?:
    | T
    | {
        text?: T;
        isCorrect?: T;
        id?: T;
      };
  explanation?: T;
  academicLevel?: T;
  subject?: T;
  difficulty?: T;
  topic?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videos_select".
 */
export interface VideosSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  subject?: T;
  topic?: T;
  video?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "books_select".
 */
export interface BooksSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  academicLevel?: T;
  subject?: T;
  category?: T;
  pdf?: T;
  description?: T;
  author?: T;
  isbn?: T;
  pageCount?: T;
  subscriptionRequired?: T;
  subscriptionTiers?: T;
  isProtected?: T;
  allowPrint?: T;
  allowCopy?: T;
  watermarkText?: T;
  encryptionKey?: T;
  fileSize?: T;
  isActive?: T;
  viewCount?: T;
  lastAccessed?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
  user?: T;
  plan?: T;
  startDate?: T;
  endDate?: T;
  paymentStatus?: T;
  transactions?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "study-plans_select".
 */
export interface StudyPlansSelect<T extends boolean = true> {
  user?: T;
  goals?: T;
  subjects?: T;
  timetable?:
    | T
    | {
        day?: T;
        session?: T;
        subject?: T;
        id?: T;
      };
  progress?: T;
  academicLevel?: T;
  planType?: T;
  targetExamDate?: T;
  studyGoals?:
    | T
    | {
        title?: T;
        description?: T;
        subject?: T;
        targetDate?: T;
        priority?: T;
        status?: T;
        progress?: T;
        completedAt?: T;
        id?: T;
      };
  weeklySchedule?:
    | T
    | {
        dayOfWeek?: T;
        startTime?: T;
        endTime?: T;
        subject?: T;
        topics?: T;
        sessionType?: T;
        isActive?: T;
        id?: T;
      };
  milestones?:
    | T
    | {
        title?: T;
        description?: T;
        targetDate?: T;
        subjects?: T;
        isCompleted?: T;
        completedAt?: T;
        reward?: T;
        id?: T;
      };
  studyReminders?:
    | T
    | {
        title?: T;
        message?: T;
        reminderTime?: T;
        reminderType?: T;
        isRecurring?: T;
        recurrencePattern?: T;
        isActive?: T;
        isSent?: T;
        sentAt?: T;
        id?: T;
      };
  studyPreferences?:
    | T
    | {
        preferredStudyTime?: T;
        sessionDuration?: T;
        breakDuration?: T;
        studyMethod?: T;
        difficultyPreference?: T;
      };
  analytics?:
    | T
    | {
        totalStudyHours?: T;
        weeklyStudyHours?: T;
        currentStreak?: T;
        longestStreak?: T;
        completedGoals?: T;
        completedMilestones?: T;
        averageSessionDuration?: T;
        lastStudySession?: T;
      };
  isActive?: T;
  createdAt?: T;
  updatedAt?: T;
  notes?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
  user?: T;
  subscription?: T;
  transactionId?: T;
  fapshiTransId?: T;
  externalId?: T;
  amount?: T;
  revenue?: T;
  status?: T;
  paymentMedium?: T;
  phone?: T;
  financialTransId?: T;
  dateInitiated?: T;
  dateConfirmed?: T;
  webhookReceived?: T;
  webhookReceivedAt?: T;
  lastStatusCheck?: T;
  statusCheckCount?: T;
  reconciled?: T;
  reconciledAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "topics_select".
 */
export interface TopicsSelect<T extends boolean = true> {
  name?: T;
  subjects?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-progress_select".
 */
export interface UserProgressSelect<T extends boolean = true> {
  user?: T;
  contentType?: T;
  contentId?: T;
  subject?: T;
  topic?: T;
  academicLevel?: T;
  progressPercentage?: T;
  timeSpent?: T;
  lastAccessed?: T;
  completed?: T;
  completedAt?: T;
  score?: T;
  attempts?: T;
  bookmarks?:
    | T
    | {
        position?: T;
        note?: T;
        createdAt?: T;
        id?: T;
      };
  studyStreak?: T;
  achievements?:
    | T
    | {
        achievementType?: T;
        earnedAt?: T;
        description?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test-results_select".
 */
export interface TestResultsSelect<T extends boolean = true> {
  user?: T;
  testType?: T;
  subject?: T;
  topics?: T;
  academicLevel?: T;
  examPaper?: T;
  questions?:
    | T
    | {
        question?: T;
        selectedAnswer?: T;
        correctAnswer?: T;
        isCorrect?: T;
        timeSpent?: T;
        difficulty?: T;
        id?: T;
      };
  totalQuestions?: T;
  correctAnswers?: T;
  incorrectAnswers?: T;
  skippedQuestions?: T;
  scorePercentage?: T;
  grade?: T;
  timeLimit?: T;
  timeUsed?: T;
  startedAt?: T;
  completedAt?: T;
  isCompleted?: T;
  attemptNumber?: T;
  weakAreas?:
    | T
    | {
        topic?: T;
        accuracy?: T;
        id?: T;
      };
  strongAreas?:
    | T
    | {
        topic?: T;
        accuracy?: T;
        id?: T;
      };
  reviewMode?: T;
  reviewedAt?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "content-access_select".
 */
export interface ContentAccessSelect<T extends boolean = true> {
  user?: T;
  contentType?: T;
  contentId?: T;
  contentTitle?: T;
  subscription?: T;
  accessGranted?: T;
  accessReason?: T;
  accessDeniedReason?: T;
  requiredSubscriptionTier?: T;
  userSubscriptionTier?: T;
  accessAttempts?: T;
  firstAccessAt?: T;
  lastAccessAt?: T;
  grantedAt?: T;
  expiresAt?: T;
  deviceInfo?:
    | T
    | {
        deviceId?: T;
        deviceType?: T;
        platform?: T;
        userAgent?: T;
        ipAddress?: T;
      };
  printAllowed?: T;
  copyAllowed?: T;
  maxConcurrentSessions?: T;
  currentSessions?: T;
  sessionToken?: T;
  isActive?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  siteName?: string | null;
  siteDescription?: string | null;
  siteLogo?: (string | null) | Media;
  siteFavicon?: (string | null) | Media;
  siteEmail?: string | null;
  sitePhone?: string | null;
  siteAddress?: string | null;
  siteSocial?:
    | {
        name?: string | null;
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  siteCopyright?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  subscriptionCosts: {
    monthly: number;
    yearly: number;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  siteName?: T;
  siteDescription?: T;
  siteLogo?: T;
  siteFavicon?: T;
  siteEmail?: T;
  sitePhone?: T;
  siteAddress?: T;
  siteSocial?:
    | T
    | {
        name?: T;
        url?: T;
        id?: T;
      };
  siteCopyright?: T;
  subscriptionCosts?:
    | T
    | {
        monthly?: T;
        yearly?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}